#!/bin/bash
#
# mapreduce
#
# init


# Stop on errors, print commands
# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -x

usage() {
  echo "Usage: $0 (start|status|stop)"
}

# Exit 1 if a Manager or Worker is already running. Otherwise, execute the following commands.
case $1 in
  "start")
    if pgrep -f mapreduce-manager || pgrep -lf mapreduce-worker; then
      echo "Error: mapreduce-manager is already running"
      exit 1
    else
      echo "starting mapreduce ..."
      mapreduce-manager 6000 5999 &
      sleep 2
      mapreduce-worker 6000 5999 6001 &
      mapreduce-worker 6000 5999 6002 &
    fi
    ;;

  "stop")
    echo "stopping mapreduce ..."
    # Detect GNU vs BSD netcat. We need netcat to close the connection after
    # sending a message, which requires different options.
    set +o pipefail  # Avoid erroneous failures due to grep returning non-zero
    if nc -h 2>&1 | grep -q "\-c"; then
      NC="nc -c"
    elif nc -h 2>&1 | grep -q "\-N"; then
      NC="nc -N"
    elif nc -h 2>&1 | grep -q "\-C"; then
      NC="nc -C"
    else
      echo "Error detecting netcat version."
      exit 1
    fi
    set -o pipefail

    echo '{"message_type": "shutdown"}' | $NC localhost 6000 || true
    sleep 2  # give the manager time to receive signal and send to workers

    if pgrep -f mapreduce-manager &> /dev/null; then
      echo "killing mapreduce manager ..."
      pkill -f mapreduce-manager || true
    fi
    if pgrep -f mapreduce-worker &> /dev/null; then
      echo "killing mapreduce worker ..."
      pkill -f mapreduce-worker || true
    fi
    ;;
  
  "status")
    if pgrep -f mapreduce-manager; then
      echo "manager running"
    else
      echo "manager not running"
    fi
    if pgrep -lf mapreduce-worker; then
      echo "workers running"
    else
      echo "workers not running"
    fi
    ;;
  *)
    usage
    exit 1
    ;;
esac
